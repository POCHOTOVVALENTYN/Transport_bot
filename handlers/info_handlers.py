from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config.messages import MESSAGES
from handlers.common import get_back_keyboard
import logging
from config.settings import RULES_PDF_PATH

logger = logging.getLogger(__name__)


async def show_info_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é '–î–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üó∫Ô∏è –ù–∞—à—ñ –º–∞—Ä—à—Ä—É—Ç–∏ (—Å—Ö–µ–º–∏)", callback_data="info:routes")],
        [InlineKeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è", callback_data="info:rules")],
        [InlineKeyboardButton("‚ôø –î–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å (–Ü–Ω–∫–ª—é–∑–∏–≤–Ω—ñ—Å—Ç—å)", callback_data="info:accessibility")],
        [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏", callback_data="info:contacts")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        text="‚ÑπÔ∏è –†–æ–∑–¥—ñ–ª '–î–æ–≤—ñ–¥–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è'. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def send_rules_pdf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î PDF-—Ñ–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è."""
    query = update.callback_query
    await query.answer()

    keyboard = await get_back_keyboard("info_menu")
    caption_text = MESSAGES.get("info_rules")

    try:
        # 1. –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (–º–µ–Ω—é "–î–æ–≤—ñ–¥–∫–∞")
        await query.delete_message()

        # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –¥–æ–∫—É–º–µ–Ω—Ç
        with open(RULES_PDF_PATH, 'rb') as document:
            await query.message.reply_document(
                document=document,
                filename="Pravyla_OMET.pdf",  # –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É, —è–∫—É –ø–æ–±–∞—á–∏—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
                caption=caption_text,
                reply_markup=keyboard
            )
        logger.info("‚úÖ Rules PDF sent successfully")

    except FileNotFoundError:
        logger.error(f"‚ùå PDF file not found: {RULES_PDF_PATH}")
        await query.message.reply_text(
            "‚ùå –§–∞–π–ª –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"‚ùå Error sending rules PDF: {e}")
        await query.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É.",
            reply_markup=keyboard
        )

async def handle_info_static(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø—ñ–¥-–º–µ–Ω—é '–î–æ–≤—ñ–¥–∫–∏'."""
    query = update.callback_query
    await query.answer()

    key = query.data.split(":")[1]

    # 'rules' —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é
    if key == "rules":
        logger.warning("handle_info_static received 'rules' key. Ignored.")
        return

    if key == "routes":
        text = MESSAGES.get("info_routes", "–¢—É—Ç –±—É–¥–µ —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç—ñ–≤...")
    elif key == "rules":
        text = MESSAGES.get("info_rules", "–¢—É—Ç –±—É–¥–µ PDF –∑ –ø—Ä–∞–≤–∏–ª–∞–º–∏...")
    else:
        text = MESSAGES.get(f"info_{key}", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

    keyboard = await get_back_keyboard("info_menu")
    await query.edit_message_text(text=text, reply_markup=keyboard)