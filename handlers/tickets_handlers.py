import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config.messages import MESSAGES
from config.settings import TICKET_PASSES_IMAGE
from handlers.common import get_back_keyboard, get_back_button_only
from telegram.constants import ParseMode

logger = logging.getLogger(__name__)


async def show_tickets_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é '–ö–≤–∏—Ç–∫–∏ —Ç–∞ —Ç–∞—Ä–∏—Ñ–∏'."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å –ø—Ä–æ—ó–∑–¥—É", callback_data="tickets:cost")],
        [InlineKeyboardButton("üí≥ –°–ø–æ—Å–æ–±–∏ –æ–ø–ª–∞—Ç–∏", callback_data="tickets:payment")],
        [InlineKeyboardButton("üßæ –í–∏–¥–∏ –ø—Ä–æ—ó–∑–Ω–∏—Ö", callback_data="tickets:passes")],
        [InlineKeyboardButton("üè™ –î–µ –ø—Ä–∏–¥–±–∞—Ç–∏/–ø–æ–ø–æ–≤–Ω–∏—Ç–∏", callback_data="tickets:purchase")],
        [InlineKeyboardButton("üëµ –ü—ñ–ª—å–≥–æ–≤–∏–π –ø—Ä–æ—ó–∑–¥", callback_data="tickets:benefits")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")],
        [InlineKeyboardButton("üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        text="üé´ –†–æ–∑–¥—ñ–ª '–ö–≤–∏—Ç–∫–∏ —Ç–∞ —Ç–∞—Ä–∏—Ñ–∏'. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_passes_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–¥—Å–∏–ª–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è + —Ç–µ–∫—Å—Ç –∑ –≤–∏–¥–∞–º–∏ –ø—Ä–æ—ó–∑–Ω–∏—Ö."""
    query = update.callback_query
    await query.answer()

    keyboard = await get_back_keyboard("tickets_menu")

    try:
        # 1. –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—Ç–æ—á–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await query.delete_message()

        # 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        with open(TICKET_PASSES_IMAGE, 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption="üé´ –í—Å—ñ –≤–∏–¥–∏ –ø—Ä–æ—ó–∑–Ω–∏—Ö –¥–ª—è –≥—Ä–æ–º–∞–¥—Å—å–∫–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É –û–¥–µ—Å–∏:",
                reply_markup=keyboard
            )

        logger.info("‚úÖ Passes image sent successfully")

    except FileNotFoundError:
        logger.error(f"‚ùå Image file not found: {TICKET_PASSES_IMAGE}")
        await query.message.reply_text(
            "‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=keyboard
        )

    except Exception as e:
        logger.error(f"‚ùå Error sending passes image: {e}")
        await query.message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.",
            reply_markup=keyboard
        )


async def handle_ticket_static(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤—Å—ñ —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø—ñ–¥-–º–µ–Ω—é '–ö–≤–∏—Ç–∫—ñ–≤'."""
    query = update.callback_query
    await query.answer()

    # –û—Ç—Ä–∏–º—É—î–º–æ –∫–ª—é—á (–Ω–∞–ø—Ä. 'cost') –∑ callback_data (–Ω–∞–ø—Ä. 'tickets:cost')
    key = query.data.split(":")[1]

    # 'passes' —Ç–µ–ø–µ—Ä –æ–±—Ä–æ–±–ª—è—î—Ç—å—Å—è –æ–∫—Ä–µ–º–æ
    if key == "passes":
        await show_passes_list(update, context)
        return

    text = MESSAGES.get(f"tickets_{key}", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
    keyboard = await get_back_keyboard("tickets_menu")

    try:
        await query.edit_message_text(
            text=text,
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"‚ùå Error in handle_ticket_static for key {key}: {e}")