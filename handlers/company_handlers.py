# handlers/company_handlers.py
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config.messages import MESSAGES
from handlers.common import get_back_keyboard


async def show_company_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é '–ü—Ä–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ'."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üëî –í–∞–∫–∞–Ω—Å—ñ—ó", callback_data="company:vacancies")],
        [InlineKeyboardButton("üéì –£—á–±–æ–≤–æ-–∫—É—Ä—Å–æ–≤–∏–π –∫–æ–º–±—ñ–Ω–∞—Ç", callback_data="company:education")],
        [InlineKeyboardButton("üöå –û—Ä–µ–Ω–¥–∞ —Ç–∞ –ø–æ—Å–ª—É–≥–∏", callback_data="company:services")],
        [InlineKeyboardButton("üì∞ –ù–æ–≤–∏–Ω–∏ / –°–æ—Ü. –º–µ—Ä–µ–∂—ñ", callback_data="company:socials")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        text="üè¢ –†–æ–∑–¥—ñ–ª '–ü—Ä–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ'. –û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def handle_company_static(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î —Å—Ç–∞—Ç–∏—á–Ω—ñ –ø—ñ–¥-–º–µ–Ω—é '–ü—Ä–æ –ø—ñ–¥–ø—Ä–∏—î–º—Å—Ç–≤–æ'."""
    query = update.callback_query
    await query.answer()

    key = query.data.split(":")[1]
    text = MESSAGES.get(f"company_{key}", "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")

    keyboard = await get_back_keyboard("company_menu")
    await query.edit_message_text(text=text, reply_markup=keyboard)


async def show_vacancies_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –ø—ñ–¥-–º–µ–Ω—é '–í–∞–∫–∞–Ω—Å—ñ—ó'."""
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üë∑ –ó –¥–æ—Å–≤—ñ–¥–æ–º", callback_data="vacancy_type:experienced")],
        [InlineKeyboardButton("üßë‚Äçüéì –ë–µ–∑ –¥–æ—Å–≤—ñ–¥—É (–Ω–∞–≤—á–∞–Ω–Ω—è)", callback_data="vacancy_type:trainee")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="company_menu")]
    ]

    await query.edit_message_text(
        text="üëî –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –≤–∞–∫–∞–Ω—Å—ñ–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_vacancy_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ–π (–ø—Ä–∏–∫–ª–∞–¥)."""
    query = update.callback_query
    await query.answer()

    v_type = query.data.split(":")[1]
    keyboard = []

    if v_type == "experienced":
        keyboard = [
            [InlineKeyboardButton("–í–æ–¥—ñ–π —Ç—Ä–∞–º–≤–∞—è", callback_data="vacancy:tram_driver")],
            [InlineKeyboardButton("–°–ª—é—Å–∞—Ä-–µ–ª–µ–∫—Ç—Ä–∏–∫", callback_data="vacancy:electrician")],
            [InlineKeyboardButton("–ë—É—Ö–≥–∞–ª—Ç–µ—Ä", callback_data="vacancy:accountant")],
        ]
    elif v_type == "trainee":
        keyboard = [
            [InlineKeyboardButton("–£—á–µ–Ω—å –≤–æ–¥—ñ—è —Ç—Ä–∞–º–≤–∞—è", callback_data="vacancy:tram_trainee")],
            [InlineKeyboardButton("–ö–æ–Ω–¥—É–∫—Ç–æ—Ä", callback_data="vacancy:conductor")],
        ]

    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="company:vacancies")])

    await query.edit_message_text(
        text="–û–±–µ—Ä—ñ—Ç—å –≤–∞–∫–∞–Ω—Å—ñ—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def show_vacancy_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—É—î –¥–µ—Ç–∞–ª—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó."""
    query = update.callback_query
    await query.answer()

    key = query.data.split(":")[1]
    text = MESSAGES.get(f"vacancy_{key}", "–î–µ—Ç–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    keyboard = await get_back_keyboard("company:vacancies")  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –¥–æ –≤–∏–±–æ—Ä—É —Ç–∏–ø—É –≤–∞–∫–∞–Ω—Å—ñ–π
    await query.edit_message_text(text=text, reply_markup=keyboard)