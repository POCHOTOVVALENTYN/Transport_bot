from datetime import datetime
from integrations.google_sheets.client import GoogleSheetsClient
from config.settings import GOOGLE_SHEETS_ID
from config.constants import SHEET_NAMES, TicketStatus
from utils.logger import logger
from utils.text_formatter import format_ticket_id, get_status_emoji
import uuid


class TicketsService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ç—ñ–∫–µ—Ç–∞–º–∏ —Å–∫–∞—Ä–≥"""

    def __init__(self):
        self.sheets = GoogleSheetsClient(GOOGLE_SHEETS_ID)

    async def create_complaint_ticket(
            self,
            telegram_id: int,
            complaint_data: dict
    ) -> dict:
        """
        –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É —Å–∫–∞—Ä–≥–∏ –≤ Google Sheets

        complaint_data –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏:
        {
            "problem": "–æ–ø–∏—Å",
            "route": "5",
            "board_number": "1234",
            "incident_datetime": "28.10.2025 14:30",
            "user_name": "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",
            "user_phone": "+380501234567"
        }
        """
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è ID
            ticket_id = format_ticket_id()

            # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ä—è–¥–∫–∞ –¥–ª—è Google Sheets
            row_data = [
                datetime.now().strftime("%d.%m.%Y %H:%M"),  # –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è
                ticket_id,  # ID —Ç—ñ–∫–µ—Ç—É
                get_status_emoji(TicketStatus.NEW),  # –°—Ç–∞—Ç—É—Å
                "üü° –°–µ—Ä–µ–¥–Ω—è",  # –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç
                complaint_data.get("route", "N/A"),  # –ú–∞—Ä—à—Ä—É—Ç
                complaint_data.get("problem", "")[:100],  # –ü–µ—Ä—à—ñ 100 —Å–∏–º–≤–æ–ª—ñ–≤
                complaint_data.get("board_number", "N/A"),  # –ë–æ—Ä—Ç
                complaint_data.get("user_name", ""),  # –Ü–º—è
                complaint_data.get("user_phone", ""),  # –¢–µ–ª–µ—Ñ–æ–Ω
                "",  # –ü—Ä–∏–º—ñ—Ç–∫–∏ (–ø–æ—Ä–æ–∂–Ω—å–æ)
                ""  # –ê–¥–º—ñ–Ω (–ø–æ—Ä–æ–∂–Ω—å–æ)
            ]

            # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≤ Google Sheets
            success = self.sheets.append_row(
                sheet_name=SHEET_NAMES["complaints"],
                values=row_data
            )

            if success:
                logger.info(f"‚úÖ Complaint ticket created: {ticket_id}")
                return {
                    "success": True,
                    "ticket_id": ticket_id,
                    "message": f"‚úÖ –í–∞—à–∞ —Å–∫–∞—Ä–≥–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞!\n–ù–æ–º–µ—Ä: {ticket_id}"
                }
            else:
                return {
                    "success": False,
                    "message": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —Å–∫–∞—Ä–≥–∏"
                }

        except Exception as e:
            logger.error(f"‚ùå Error creating ticket: {e}")
            return {
                "success": False,
                "message": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞"
            }

    async def create_suggestion_ticket(
            self,
            telegram_id: int,
            text: str,
            contact_info: str = "N/A"
    ) -> dict:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"""
        try:
            ticket_id = format_ticket_id()

            row_data = [
                datetime.now().strftime("%d.%m.%Y %H:%M"),
                ticket_id,
                "üí° –ü—Ä–æ–ø–æ–∑–∏—Ü—ñ—è",
                "üü¢ –ù–∏–∑—å–∫–∞",
                "N/A",  # –ú–∞—Ä—à—Ä—É—Ç
                text[:100],
                "N/A",  # –ë–æ—Ä—Ç
                contact_info.split(',')[0].strip() if contact_info != "N/A" else "–ê–Ω–æ–Ω—ñ–º–Ω–æ",  # –Ü–º—è
                contact_info if contact_info != "N/A" else "N/A",  # –¢–µ–ª–µ—Ñ–æ–Ω/–ö–æ–Ω—Ç–∞–∫—Ç
                "",
                ""
            ]

            success = self.sheets.append_row(
                sheet_name=SHEET_NAMES["suggestions"],
                values=row_data
            )

            if success:
                logger.info(f"‚úÖ Suggestion ticket created: {ticket_id}")
                return {
                    "success": True,
                    "ticket_id": ticket_id,
                    "message": f"üí° –î—è–∫—É—î–º–æ! –í–∞—à–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∞.\n–ù–æ–º–µ—Ä: {ticket_id}"
                }
            else:
                return {
                    "success": False,
                    "message": "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó"
                }

        except Exception as e:
            logger.error(f"‚ùå Error creating suggestion: {e}")
            return {"success": False, "message": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞"}

    async def create_thanks_ticket(
            self,
            telegram_id: int,
            text: str,
            route: str = None,
            board_number: str = None
    ) -> dict:
        """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç—ñ–∫–µ—Ç—É –ø–æ–¥—è–∫–∏"""
        try:
            ticket_id = format_ticket_id()

            row_data = [
                datetime.now().strftime("%d.%m.%Y %H:%M"),
                ticket_id,
                "‚úÖ –ü–æ–¥—è–∫–∞",
                "üü¢ –ù–∏–∑—å–∫–∞",
                route or "N/A",
                text[:100],
                board_number or "N/A",
                "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á",
                "N/A",
                "",
                ""
            ]

            success = self.sheets.append_row(
                sheet_name=SHEET_NAMES["thanks"],
                values=row_data
            )

            if success:
                return {
                    "success": True,
                    "ticket_id": ticket_id,
                    "message": f"‚ù§Ô∏è –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω–∏–π –∑–≤'—è–∑–æ–∫!\n–ù–æ–º–µ—Ä: {ticket_id}"
                }
            else:
                return {"success": False, "message": "‚ùå –ü–æ–º–∏–ª–∫–∞"}

        except Exception as e:
            logger.error(f"‚ùå Error creating thanks: {e}")
            return {"success": False, "message": "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞"}